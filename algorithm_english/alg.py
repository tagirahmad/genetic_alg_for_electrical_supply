# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-

from math import sqrt, ceil, acos, tan, floor
import itertools
from constants.constants import *
from constants.aasv_cable import *
from constants.asb_cable import *
from constants.circuit_breaker import *
from constants.transformer import *


class Цех:
    расчетная_активная_мощность = 0
    расчетная_реактивная_мощность = 0
    расчетная_активная_мощность_сумма = 0
    расчетная_реактивная_мощность_сумма = 0
    расчетная_полная_мощность = 0
    tan_fi_n = 0
    мощность_компенсирующих_устр = 0
    выбранное_ку = 0
    комплексная_реактивная_мощность_после_компенсации = 0
    полная_расчетная_нагрузка_трансформаторов = 0
    расчетная_мощность_трансформатора = 0
    предварительно_выбранный_трансформатор = None
    выбранный_трансформатор = None
    коэффициент_загрузки_трансформатора = 0
    потери_активной_мощности_тп = None
    потери_реактивной_мощности_тп = None
    допустимая_потеря_напряжения = None
    экономическая_плотность_тока = None
    расчетная_нагрузка_а_гпп_тп = None
    расчетная_нагрузка_н_гпп_тп = None
    расчетная_токовая_нагрузка_а_гпп_тп = None
    расчетная_токовая_нагрузка_н_гпп_тп = None
    допустимая_токовая_нагрузка_а_гпп_тп = None
    допустимая_токовая_нагрузка_н_гпп_тп = None
    k1 = None
    k2 = 1.15
    кабель_ток = 0
    выбранный_кабель = None
    капитальные_вложения_на_линию = 0
    расход_цветного_материала = 0
    коэффициент_загрузки = 0
    потери_мощности_рассматриваемой_линии = 0
    потери_электроэнергии = 0
    стоимость_потерь_электроэнергии = 0
    стоимость_амортизационных_отчислений = 0
    капитальные_вложения_выключатель = 0
    стоимость_амортизационных_отчислений_выключатель = 0
    стоимость_трансформаторов = 0
    привиденные_потери_в_тп = 0
    потери_электроэнергии_в_тп = 0
    стоимость_потерь_электроэнергии_в_тп = 0
    стоимость_амортизационных_отчислений_на_тп = 0
    длина = 0

    def расчёт_расчётной_активной_мощности(self):
        self.расчетная_активная_мощность = self.мощность_цеха * self.коэффициент_спроса

    def расчёт_расчётной_реактивной_мощности(self, cosfi):
        self.расчетная_реактивная_мощность = self.расчетная_активная_мощность * tan(
            acos(cosfi)
        )

    def расчёт_расчетной_полной_мощности(self):
        self.расчетная_полная_мощность = sqrt(
            ((self.расчетная_активная_мощность) ** 2)
            + ((self.расчетная_реактивная_мощность) ** 2)
        )

    def расчет_тангенса_фи_н(self):
        self.tan_fi_n = (
            self.расчетная_реактивная_мощность / self.расчетная_активная_мощность
        )

    def расчет_мощности_компенсирующих_устр(self):
        self.мощность_компенсирующих_устр = self.расчетная_активная_мощность * (
            self.tan_fi_n - 0.33
        )

    def выбор_мощности_компенсирующих_устр(self, количество_трансформаторов):
        if (
            self.мощность_компенсирующих_устр <= 25
            and self.количество_трансформаторов != 0
        ):
            self.выбранное_ку = 25
        elif количество_трансформаторов != 0:
            self.выбранное_ку = (
                floor(
                    (
                        (self.мощность_компенсирующих_устр)
                        / (количество_трансформаторов * 25)
                    )
                )
                * 25
            )

    def расчет_комплексной_реактивной_мощности_после_компенсации(
        self, количество_трансформаторов
    ):
        self.комплексная_реактивная_мощность_после_компенсации = (
            self.расчетная_реактивная_мощность
            - self.количество_трансформаторов * self.выбранное_ку
        )

    def расчет_полной_расчетной_нагрузки_трансформаторов(self):
        self.полная_расчетная_нагрузка_трансформаторов = sqrt(
            self.расчетная_активная_мощность ** 2
            + self.комплексная_реактивная_мощность_после_компенсации ** 2
        )

    def расчет_расчетной_мощности_трансформатора(self, количество_трансформаторов):
        if количество_трансформаторов != 0:
            self.расчетная_мощность_трансформатора = (
                self.полная_расчетная_нагрузка_трансформаторов
                / (количество_трансформаторов * 0.7)
            )

    def выбор_цеховых_трансформаторов(self, количество_трансформаторов):
        # if self.полная_расчетная_нагрузка_трансформаторов
        if количество_трансформаторов != 0:
            self.предварительно_выбранный_трансформатор = min(
                n
                for n in номинальные_мощности_трансформаторов
                if n > self.расчетная_мощность_трансформатора
            )

    def расчет_коэффициента_загрузки_трансформатора(self, количество_трансформаторов):
        # for i in range(мощности_трансформаторов):
        if self.количество_трансформаторов != 0:
            self.коэффициент_загрузки_трансформатора = round(
                (
                    self.расчетная_полная_мощность
                    / (
                        self.количество_трансформаторов
                        * self.предварительно_выбранный_трансформатор
                    )
                ),
                2,
            )
            if self.коэффициент_загрузки_трансформатора > 0.7:
                self.выбранный_трансформатор = номинальные_мощности_трансформаторов[
                    номинальные_мощности_трансформаторов.index(
                        self.предварительно_выбранный_трансформатор
                    )
                    + 1
                ]
            else:
                self.выбранный_трансформатор = (
                    self.предварительно_выбранный_трансформатор
                )
            # переасчет кз после выбранного трансформатора
            self.коэффициент_загрузки_трансформатора = round(
                (
                    self.расчетная_полная_мощность
                    / (self.количество_трансформаторов * self.выбранный_трансформатор)
                ),
                2,
            )
    def расчет_потерь_активной_мощности_тп(self, типы_трансформаторов):
        if типы_трансформаторов == "масляный" and self.выбранный_трансформатор != None:
            self.потери_активной_мощности_тп = delta_p_xx_tm[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ] + delta_p_kz_tm[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ] * pow(
                self.коэффициент_загрузки_трансформатора, 2
            )
        elif типы_трансформаторов == "сухой" and self.выбранный_трансформатор != None:
            self.потери_активной_мощности_тп = delta_p_xx_tsz[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ] + delta_p_kz_tsz[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ] * pow(
                self.коэффициент_загрузки_трансформатора, 2
            )
        else:
            pass

    def расчет_потерь_реактивной_мощности_тп(self, типы_трансформаторов):
        if типы_трансформаторов == "масляный" and self.выбранный_трансформатор != None:
            i_xx = i_xx_tm[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ]
            delta_q_xx_tm = (i_xx / 100) * self.выбранный_трансформатор
            u_kz = u_kz_tm[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ]
            delta_q_kz_tm = (u_kz / 100) * self.выбранный_трансформатор
            self.потери_реактивной_мощности_тп = delta_q_xx_tm + delta_q_kz_tm * pow(
                self.коэффициент_загрузки_трансформатора, 2
            )
        elif типы_трансформаторов == "сухой" and self.выбранный_трансформатор != None:
            i_xx = i_xx_tsz[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ]
            delta_q_xx_tsz = (i_xx / 100) * self.выбранный_трансформатор
            u_kz = u_kz_tsz[
                номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)
            ]
            delta_q_kz_tsz = (u_kz / 100) * self.выбранный_трансформатор
            self.потери_реактивной_мощности_тп = delta_q_xx_tsz + delta_q_kz_tsz * pow(
                self.коэффициент_загрузки_трансформатора, 2
            )

    def расчет_расчетной_нагрузки_а_гпп_тп(self):
        if self.количество_трансформаторов != 0:
            self.расчетная_нагрузка_а_гпп_тп = sqrt(
                (
                    self.расчетная_активная_мощность_сумма
                    + self.потери_активной_мощности_тп
                )
                ** 2
                + (
                    self.расчетная_реактивная_мощность_сумма
                    + self.потери_реактивной_мощности_тп
                )
                ** 2
            )
            print(self.расчетная_нагрузка_а_гпп_тп, "расчетная_нагрузка_а_гпп_тп")
            print(
                self.расчетная_активная_мощность_сумма,
                "расчетная_активная_мощность_сумма",
            )

    def расчет_расчетной_нагрузки_н_гпп_тп(self):
        if self.количество_трансформаторов != 0:
            self.расчетная_нагрузка_н_гпп_тп = sqrt(
                (
                    (
                        self.расчетная_активная_мощность_сумма
                        / self.количество_трансформаторов
                    )
                    + self.потери_активной_мощности_тп
                )
                ** 2
                + (
                    (
                        self.расчетная_реактивная_мощность_сумма
                        / self.количество_трансформаторов
                    )
                    + self.потери_реактивной_мощности_тп
                )
                ** 2
            )


    def расчет_расчетной_токовой_нагрузки_а_гпп_тп(self):
        if self.количество_трансформаторов != 0:
            self.расчетная_токовая_нагрузка_а_гпп_тп = (
                self.расчетная_нагрузка_а_гпп_тп / (sqrt(3) * 10)
            )
            print(self.расчетная_нагрузка_а_гпп_тп, "self.расчетная_нагрузка_а_гпп_тп")
        elif self.количество_трансформаторов == 0:
            self.расчетная_токовая_нагрузка_а_гпп_тп = (
                self.полная_расчетная_нагрузка_трансформаторов / (sqrt(3) * 10)
            )

    def расчет_расчетной_токовой_нагрузки_н_гпп_тп(self):
        if self.количество_трансформаторов != 0:
            self.расчетная_токовая_нагрузка_н_гпп_тп = (
                self.расчетная_нагрузка_н_гпп_тп / (sqrt(3) * 10)
            )
            print(
                self.расчетная_токовая_нагрузка_н_гпп_тп,
                "self.расчетная_токовая_нагрузка_н_гпп_тп",
            )
        elif self.количество_трансформаторов == 0:
            self.расчетная_токовая_нагрузка_н_гпп_тп = (
                self.полная_расчетная_нагрузка_трансформаторов / (sqrt(3) * 10)
            )

    def расчет_к1(self, количество_трансформаторов):
        if self.количество_трансформаторов == 1:
            self.k1 = 1
        elif self.количество_трансформаторов == 2:
            self.k1 = 0.9
        elif self.количество_трансформаторов == 4:
            self.k1 = 0.8

    def расчет_допустимой_токовой_нагрузка_н_гпп_тп(self):
        if self.количество_трансформаторов != 0:
            self.допустимая_токовая_нагрузка_н_гпп_тп = (
                self.расчетная_токовая_нагрузка_н_гпп_тп / self.k1
            )
        elif self.количество_трансформаторов == 0:
            self.допустимая_токовая_нагрузка_н_гпп_тп = (
                self.расчетная_токовая_нагрузка_н_гпп_тп
            )

    def расчет_допустимой_токовой_нагрузка_а_гпп_тп(self):
        if self.количество_трансформаторов != 0:
            self.допустимая_токовая_нагрузка_а_гпп_тп = (
                self.расчетная_токовая_нагрузка_а_гпп_тп / (self.k1 * self.k2)
            )
        elif self.количество_трансформаторов == 0:
            self.допустимая_токовая_нагрузка_а_гпп_тп = (
                self.расчетная_токовая_нагрузка_а_гпп_тп
            )

    def выбор_кабелей(self, количество_трансформаторов):
        if self.количество_трансформаторов > 0:
            # кабель = None
            try:
                кабель = next(
                    num
                    for num in i_dop_kab_aasv
                    if num > self.допустимая_токовая_нагрузка_а_гпп_тп
                )
                self.кабель_ток = кабель
                # print(кабель, 'кабель')

                l_delta_index = i_dop_kab_aasv.index(кабель)
                self.допустимая_потеря_напряжения = (
                    l_delta_u1percent[l_delta_index]
                    * 10
                    * (кабель / self.допустимая_токовая_нагрузка_а_гпп_тп)
                )
                # print(допустимая_потеря_напряжения, 'допустимая_потеря_напряжения')
                while self.допустимая_потеря_напряжения < self.длины_линий:
                    i_dop_kab_aasv_index = i_dop_kab_aasv(кабель)
                    кабель = i_dop_kab_aasv[i_dop_kab_aasv_index + 1]

                self.кабель_ток = кабель
                # if self.допустимая_потеря_напряжения < self.длины_линий:
                #     i_dop_kab_aasv_index = i_dop_kab_aasv(кабель)
                #     кабель = i_dop_kab_aasv[i_dop_kab_aasv_index + 1]

                self.экономическая_плотность_тока = (
                    self.расчетная_нагрузка_н_гпп_тп / 1.4
                )
                # print(экономическая_плотность_тока, 'экономическая_плотность_тока')
                while (
                    self.экономическая_плотность_тока
                    > сечения_кабелей[i_dop_kab_aasv.index(кабель)]
                ):
                    i_dop_kab_aasv_index = i_dop_kab_aasv.index(кабель)
                    кабель = i_dop_kab_aasv[i_dop_kab_aasv_index + 1]

                self.кабель_ток = кабель

                self.выбранный_кабель = сечения_кабелей[i_dop_kab_aasv.index(кабель)]
                # print(self.допустимая_потеря_напряжения, 'допустимая_потеря_напряжения')
                # print(self.длины_линий, 'длины_линий')
                # print(self.допустимая_токовая_нагрузка_а_гпп_тп, 'допустимая_токовая_нагрузка_а_гпп_тп')
                # print(self.экономическая_плотность_тока, 'экономическая_плотность_тока')
            except StopIteration:
                print("done")
        elif self.количество_трансформаторов == 0:
            try:
                кабель = next(
                    num
                    for num in i_dop_kab_asb
                    if num > self.допустимая_токовая_нагрузка_а_гпп_тп
                )
                self.кабель_ток = кабель
                i_dop_kab_asb_index = i_dop_kab_asb.index(кабель)
                if (
                    self.полная_расчетная_нагрузка_трансформаторов
                    < s_asb[i_dop_kab_asb_index]
                ):
                    кабель = i_dop_kab_asb[i_dop_kab_asb_index]
                    self.кабель_ток = кабель
                else:
                    i_dop_kab_asb_index = i_dop_kab_asb.index(кабель)
                    while (
                        self.полная_расчетная_нагрузка_трансформаторов
                        < s_asb[i_dop_kab_asb_index]
                    ):
                        i_dop_kab_asb_index = i_dop_kab_asb.index(кабель)
                        кабель = i_dop_kab_asb[i_dop_kab_asb_index + 1]
                    self.кабель_ток = кабель

                self.кабель_ток = кабель

                self.выбранный_кабель = сечения_кабелей[i_dop_kab_asb.index(кабель)]

                print(self.выбранный_кабель, "кабель")

            except StopIteration:
                print("done")

    def расчет_капитальных_вложений_на_линию(
        self, количество_трансформаторов, длины_линий
    ):
        if количество_трансформаторов != 0:
            self.капитальные_вложения_на_линию = (
                количество_трансформаторов
                * длины_линий
                * pow(10, -3)
                * стоимость_одного_км_линии_аашв[
                    сечения_кабелей.index(self.выбранный_кабель)
                ]
            )
        elif количество_трансформаторов == 0:
            self.капитальные_вложения_на_линию = (
                длины_линий
                * pow(10, -3)
                * стоимость_одного_км_линии_асб[
                    сечения_кабелей.index(self.выбранный_кабель)
                ]
            )

    def расчет_расхода_цветного_материала(
        self, количество_трансформаторов, длины_линий
    ):
        if количество_трансформаторов > 0:
            self.расход_цветного_материала = (
                self.количество_трансформаторов
                * длины_линий
                * pow(10, -3)
                * удельный_расход_цветного_материала_аашв[
                    сечения_кабелей.index(self.выбранный_кабель)
                ]
            )
        elif количество_трансформаторов == 0:
            self.расход_цветного_материала = (
                длины_линий
                * pow(10, -3)
                * удельный_расход_цветного_материала_асб[
                    сечения_кабелей.index(self.выбранный_кабель)
                ]
            )

    def расчет_коэффициента_загрузки(self, количество_трансформаторов):
        # if количество_трансформаторов > 0:
        self.коэффициент_загрузки = (
            self.расчетная_токовая_нагрузка_н_гпп_тп / self.кабель_ток
        )

    def расчет_потерь_мощности_рассматриваемой_линии(
        self, количество_трансформаторов, длины_линий
    ):
        if количество_трансформаторов > 0:
            self.потери_мощности_рассматриваемой_линии = (
                количество_трансформаторов
                * self.потери_активной_мощности_тп
                * длины_линий
                * pow(10, -3)
                * self.коэффициент_загрузки ** 2
            )
        # elif количество_трансформаторов == 0:
        #     self.потери_мощности_рассматриваемой_линии = self.потери_активной_мощности_тп * длины_линий * pow(10, -3) * self.коэффициент_загрузки**2

    def расчет_потерь_электроэнергии(self):
        self.потери_электроэнергии = (
            self.потери_мощности_рассматриваемой_линии * число_часов_работы_предприятия
        )

    def расчет_стоимости_потерь_электроэнергии(self):
        self.стоимость_потерь_электроэнергии = (
            self.потери_электроэнергии * стоимость_квт_электроэнергии * pow(10, -3)
        )

    def расчет_стоимости_амортизационных_отчислений(self):
        self.стоимость_амортизационных_отчислений = (
            коэффициент_амортизационных_отчислений * self.капитальные_вложения_на_линию
        )

    def расчет_капитальных_вложений_выключатель(
        self, количество_выключателей, цены_выключателей
    ):
        self.капитальные_вложения_выключатель = (
            количество_выключателей * цены_выключателей
        )

    def расчет_стоимости_амортизационных_отчислений_выключатель(self):
        self.стоимость_амортизационных_отчислений_выключатель = (
            коэффициент_амортизационных_отчислений_выключатель
            * self.капитальные_вложения_выключатель
        )

    def расчет_стоимости_трансформаторов(
        self, количество_трансформаторов
    ):
        if количество_трансформаторов != 0:
            self.стоимость_трансформаторов = (
                количество_трансформаторов * цены_трансформаторов[номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)]
            )

    def расчет_привиденных_потерь_в_тп(
        self, количество_трансформаторов, типы_трансформаторов
    ):
        if типы_трансформаторов == "масляный" and количество_трансформаторов != 0:
            self.привиденные_потери_в_тп = количество_трансформаторов * (
                delta_p_xx_tm[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                + delta_p_kz_tm[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                * self.коэффициент_загрузки_трансформатора ** 2
            )
        elif типы_трансформаторов == "сухой" and количество_трансформаторов != 0:
            self.привиденные_потери_в_тп = количество_трансформаторов * (
                delta_p_xx_tsz[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                + delta_p_kz_tsz[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                * self.коэффициент_загрузки_трансформатора ** 2
            )

    def расчет_потерь_электроэнергии_в_тп(
        self, количество_трансформаторов, типы_трансформаторов
    ):
        if типы_трансформаторов == "масляный" and количество_трансформаторов != 0:
            self.потери_электроэнергии_в_тп = количество_трансформаторов * (
                delta_p_xx_tm[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                * т_в
                + delta_p_kz_tm[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                * (self.коэффициент_загрузки_трансформатора ** 2)
                * число_часов_работы_предприятия
            )
        elif типы_трансформаторов == "сухой" and количество_трансформаторов != 0:
            self.потери_электроэнергии_в_тп = количество_трансформаторов * (
                delta_p_xx_tsz[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                * т_в
                + delta_p_kz_tsz[
                    номинальные_мощности_трансформаторов.index(
                        self.выбранный_трансформатор
                    )
                ]
                * (self.коэффициент_загрузки_трансформатора ** 2)
                * число_часов_работы_предприятия
            )

    def расчет_стоимости_потерь_электроэнергии_в_тп(self, количество_трансформаторов):
        if количество_трансформаторов != 0:
            self.стоимость_потерь_электроэнергии_в_тп = (
                self.потери_электроэнергии_в_тп
                * стоимость_квт_электроэнергии
                * pow(10, -3)
            )

    def расчет_стоимости_амортизационных_отчислений_на_тп(
        self, количество_трансформаторов
    ):
        if количество_трансформаторов != 0:
            self.стоимость_амортизационных_отчислений_на_тп = (
                количество_трансформаторов
                * цены_трансформаторов[номинальные_мощности_трансформаторов.index(self.выбранный_трансформатор)]
                * коэффициент_амортизационных_отчислений_тп
            )

    def расчет_длины(self, координаты_цехов):
        self.длина = abs(координаты_гпп[0] - координаты_цехов[0]) + abs(
            координаты_гпп[1] - abs(координаты_цехов[1])
        )

    def __init__(
        self,
        мощность_цеха,
        коэффициент_спроса,
        cos_fi,
        количество_трансформаторов,
        типы_трансформаторов,
        длины_линий,
        количество_выключателей,
        типы_выключателей,
        цены_выключателей,
        координаты_цехов,
    ):
        self.мощность_цеха = мощность_цеха
        self.коэффициент_спроса = коэффициент_спроса
        self.cos_fi = cos_fi
        self.количество_трансформаторов = количество_трансформаторов
        self.типы_трансформаторов = типы_трансформаторов
        self.длины_линий = длины_линий
        self.количество_выключателей = количество_выключателей
        self.цены_выключателей = цены_выключателей
        self.типы_выключателей = типы_выключателей
        self.координаты_цехов = координаты_цехов

        self.расчёт_расчётной_активной_мощности()
        self.расчёт_расчётной_реактивной_мощности(cos_fi)
        self.расчёт_расчетной_полной_мощности()
        self.расчет_тангенса_фи_н()
        self.расчет_мощности_компенсирующих_устр()
        self.выбор_мощности_компенсирующих_устр(количество_трансформаторов)
        self.расчет_комплексной_реактивной_мощности_после_компенсации(
            количество_трансформаторов
        )
        self.расчет_полной_расчетной_нагрузки_трансформаторов()
        self.расчет_расчетной_мощности_трансформатора(количество_трансформаторов)
        self.выбор_цеховых_трансформаторов(количество_трансформаторов)
        self.расчет_коэффициента_загрузки_трансформатора(количество_трансформаторов)
        self.расчет_потерь_активной_мощности_тп(типы_трансформаторов)
        self.расчет_потерь_реактивной_мощности_тп(типы_трансформаторов)
        self.расчет_расчетной_нагрузки_а_гпп_тп()
        self.расчет_расчетной_нагрузки_н_гпп_тп()
        self.расчет_к1(количество_трансформаторов)
        self.расчет_расчетной_токовой_нагрузки_а_гпп_тп()
        self.расчет_расчетной_токовой_нагрузки_н_гпп_тп()
        self.расчет_допустимой_токовой_нагрузка_н_гпп_тп()
        self.расчет_допустимой_токовой_нагрузка_а_гпп_тп()
        self.выбор_кабелей(количество_трансформаторов)
        self.расчет_капитальных_вложений_на_линию(
            количество_трансформаторов, длины_линий
        )
        self.расчет_расхода_цветного_материала(количество_трансформаторов, длины_линий)
        self.расчет_коэффициента_загрузки(количество_трансформаторов)
        self.расчет_потерь_мощности_рассматриваемой_линии(
            количество_трансформаторов, длины_линий
        )
        self.расчет_потерь_электроэнергии()
        self.расчет_стоимости_потерь_электроэнергии()
        self.расчет_стоимости_амортизационных_отчислений()
        self.расчет_капитальных_вложений_выключатель(
            количество_выключателей, цены_выключателей
        )
        self.расчет_стоимости_трансформаторов(
            количество_трансформаторов
        )
        self.расчет_привиденных_потерь_в_тп(
            количество_трансформаторов, типы_трансформаторов
        )
        self.расчет_потерь_электроэнергии_в_тп(
            количество_трансформаторов, типы_трансформаторов
        )
        self.расчет_стоимости_потерь_электроэнергии_в_тп(количество_трансформаторов)
        self.расчет_стоимости_амортизационных_отчислений_на_тп(
            количество_трансформаторов
        )
        self.расчет_длины(координаты_цехов)

    # def __repr__(self):
    # return "<Цех input_param:%d some_param:%d other_param:%d>" %
    # (self.input_param, self.some_param, self.other_param)

    # def __str__(self):
    # return "<Цех input_param:%d some_param:%d other_param:%d>" %
    # (self.input_param, self.some_param, self.other_param)


нет_доп_цехов = -1
карта_дополнительных_цехов = {
    0: [нет_доп_цехов],
    1: [нет_доп_цехов],
    2: [нет_доп_цехов],
    3: [нет_доп_цехов],
    4: [нет_доп_цехов],
    5: [нет_доп_цехов],
    6: [нет_доп_цехов],
    7: [нет_доп_цехов],
    8: [6],
    9: [нет_доп_цехов],
    10: [нет_доп_цехов],
    11: [нет_доп_цехов],
    12: [11],
    13: [10],
    14: [нет_доп_цехов],
}  # НУЖНО НЕ ЗАБЫТЬ УЧЕСТЬ, что это индексы цехов, а не сами цеха


# noinspection NonAsciiCharacters
class КонтейнерЦехов:
    длина_линии = 0.6
    коэфф_разновременности_максимумов = 0.9
    активная_мощность_с_учетом_потерь = 0
    реактивная_мощность_с_учетом_потерь = 0
    мощность_компенсирующих_устр = 0
    потери_мощности_в_ку = 0
    расчетная_активная_мощность_на_гинах_гпп = 0
    расчетная_реактивная_мощность_на_гинах_гпп = 0
    полная_расчетная_мощность_на_шинах_гпп = 0
    потери_активной_мощности_в_трансф_гпп = 0
    потери_реактивной_мощности_в_трансф_гпп = 0
    полная_расчетная_нагрузка_с_учетом_потерь_мощности = 0
    напряжение_питающей_линии = 0

    # к_л = 0
    # к_эа = 0
    # к_тп = 0
    # с_ал = 0
    # с_пт = 0
    # с_пл = 0
    # с_аэа = 0
    # с_атп = 0
    # затраты = 0

    def расчет_активной_мощности_с_учетом_потерь(self):
        сумма_расчётных_активных_мощностей = 0

        for цех in self.цеха:
            сумма_расчётных_активных_мощностей += цех.расчетная_активная_мощность
        self.активная_мощность_с_учетом_потерь = сумма_расчётных_активных_мощностей

    def расчет_реактивной_мощности_с_учетом_потерь(self):
        сумма_расчётных_реактивных_мощностей = 0

        for цех in self.цеха:
            сумма_расчётных_реактивных_мощностей += цех.расчетная_реактивная_мощность
        self.реактивная_мощность_с_учетом_потерь = сумма_расчётных_реактивных_мощностей

    def расчет_мощности_компенсирующих_устр(self):
        tanfi_n = (
            self.реактивная_мощность_с_учетом_потерь
            / self.активная_мощность_с_учетом_потерь
        )
        # print(tanfi_n, 'tanfi_n')
        self.мощность_компенсирующих_устр = self.активная_мощность_с_учетом_потерь * (
            tanfi_n - 0.33
        )

    def расчет_потери_мощности_в_ку(self):
        self.потери_мощности_в_ку = 0.002 * self.мощность_компенсирующих_устр

    def расчет_расчетной_активной_мощности_на_шинах_гпп(self):
        self.расчетная_активная_мощность_на_гинах_гпп = (
            self.активная_мощность_с_учетом_потерь + self.потери_мощности_в_ку
        ) * self.коэфф_разновременности_максимумов

    def расчет_расчетной_реактивной_мощности_на_шинах_гпп(self):
        self.расчетная_реактивная_мощность_на_гинах_гпп = (
            self.реактивная_мощность_с_учетом_потерь - self.мощность_компенсирующих_устр
        ) * self.коэфф_разновременности_максимумов

    def расчет_полной_расчетной_мощности_на_шинах_гпп(self):
        self.полная_расчетная_мощность_на_шинах_гпп = sqrt(
            self.расчетная_активная_мощность_на_гинах_гпп ** 2
            + self.расчетная_реактивная_мощность_на_гинах_гпп ** 2
        )

    def расчет_потерь_активной_мощности_в_трансф_гпп(self):
        self.потери_активной_мощности_в_трансф_гпп = (
            0.02 * self.полная_расчетная_мощность_на_шинах_гпп
        )

    def расчет_потерь_реактивной_мощности_в_трансф_гпп(self):
        self.потери_реактивной_мощности_в_трансф_гпп = (
            0.1 * self.полная_расчетная_мощность_на_шинах_гпп
        )

    def расчет_полной_расчетной_нагрузки_с_учетом_потерь_мощности(self):
        self.полная_расчетная_нагрузка_с_учетом_потерь_мощности = sqrt(
            (
                self.расчетная_активная_мощность_на_гинах_гпп
                + self.потери_активной_мощности_в_трансф_гпп
            )
            ** 2
            + (
                self.расчетная_реактивная_мощность_на_гинах_гпп
                + self.потери_реактивной_мощности_в_трансф_гпп
            )
            ** 2
        )

    def расчет_напряжения_питающей_линии(self):
        u1 = (
            3 * sqrt(self.полная_расчетная_нагрузка_с_учетом_потерь_мощности * 10 ** -3)
            + 0.5 * self.длина_линии
        )

        u2 = 4.34 * sqrt(
            self.длина_линии
            + 16
            * (
                self.расчетная_активная_мощность_на_гинах_гпп
                + self.потери_активной_мощности_в_трансф_гпп
            )
            * 10 ** -3
        )
        u3 = 16 * sqrt(
            sqrt(
                (
                    self.расчетная_активная_мощность_на_гинах_гпп
                    + self.потери_активной_мощности_в_трансф_гпп
                )
                * 10 ** -3
                * self.длина_линии
            )
        )
        u4 = 17 * sqrt(
            (self.длина_линии / 16)
            + (
                self.расчетная_активная_мощность_на_гинах_гпп
                + self.потери_активной_мощности_в_трансф_гпп
            )
            * 10 ** -3
        )

        sum_u = u1 + u2 + u3 + u4
        self.напряжение_питающей_линии = sum_u / 4

    def расчёт_дополнительной_мощности(
        self, основной_цех: Цех, дополнительные_цеха: [Цех]
    ):
        основной_цех.расчетная_реактивная_мощность_сумма = (
            основной_цех.расчетная_реактивная_мощность
        )
        основной_цех.расчетная_активная_мощность_сумма = (
            основной_цех.расчетная_активная_мощность
        )

        for дополнительный_цех in дополнительные_цеха:
            основной_цех.расчетная_реактивная_мощность_сумма += (
                дополнительный_цех.расчетная_реактивная_мощность
            )
            основной_цех.расчетная_активная_мощность_сумма += (
                дополнительный_цех.расчетная_активная_мощность
            )

    к_л = 0
    к_эа = 0
    к_тп = 0
    с_ал = 0
    с_пт = 0
    с_пл = 0
    с_аэа = 0
    с_атп = 0
    затраты = 0

    def расчет__затрат(self):
        for i in range(количество_цехов):
            self.к_л += self.цеха[i].капитальные_вложения_на_линию
            self.к_эа += self.цеха[i].капитальные_вложения_выключатель
            self.к_тп += self.цеха[i].стоимость_трансформаторов
            self.с_ал += self.цеха[i].стоимость_амортизационных_отчислений
            self.с_пт += self.цеха[i].стоимость_потерь_электроэнергии_в_тп
            self.с_пл += self.цеха[i].стоимость_потерь_электроэнергии
            self.с_аэа += self.цеха[i].стоимость_амортизационных_отчислений_выключатель
            self.с_атп += self.цеха[i].стоимость_амортизационных_отчислений_на_тп

    def расчет_затрат(self):
        self.затраты = (
            0.15 * (self.к_л + self.к_эа + self.к_тп)
            + self.с_ал
            + self.с_пт
            + self.с_пл
            + self.с_аэа
            + self.с_атп
        )

    def __init__(self):
        self.цеха = []
        for i in range(len(мощности_цеха)):
            цех = Цех(
                мощности_цеха[i],
                коэффициенты_спроса[i],
                cos_fi[i],
                количество_трансформаторов[i],
                # мощности_трансформаторов[i],
                типы_трансформаторов[i],
                длины_линий[i],
                типы_выключателей[i],
                цены_выключателей[i],
                количество_выключателей[i],
                координаты_цехов[i],
            )
            self.цеха.append(цех)

        # print(self.цеха[0].расчетная_активная_мощность  , 'расчетная_активная_мощность')
        self.расчет_активной_мощности_с_учетом_потерь()
        self.расчет_реактивной_мощности_с_учетом_потерь()
        # print(self.активная_мощность_с_учетом_потерь, 'активная_мощность_с_учетом_потерь')
        # print(self.реактивная_мощность_с_учетом_потерь, 'реактивная_мощность_с_учетом_потерь')
        self.расчет_мощности_компенсирующих_устр()
        self.расчет_потери_мощности_в_ку()
        self.расчет_расчетной_активной_мощности_на_шинах_гпп()
        self.расчет_расчетной_реактивной_мощности_на_шинах_гпп()
        self.расчет_полной_расчетной_мощности_на_шинах_гпп()
        self.расчет_потерь_активной_мощности_в_трансф_гпп()
        self.расчет_потерь_реактивной_мощности_в_трансф_гпп()
        self.расчет_полной_расчетной_нагрузки_с_учетом_потерь_мощности()
        self.расчет_напряжения_питающей_линии()
        self.расчет__затрат()
        self.расчет_затрат()

        # учет РП(мощности тп + мощности тп)

        for _, (индекс_основного_цех, индексы_дополнительных_цехов) in enumerate(
            карта_дополнительных_цехов.items()
        ):
            основной_цех = self.цеха[индекс_основного_цех]
            дополнительные_цеха = []

            if индексы_дополнительных_цехов[0] == нет_доп_цехов:
                основной_цех.расчетная_реактивная_мощность_сумма = (
                    основной_цех.расчетная_реактивная_мощность
                )
                основной_цех.расчетная_активная_мощность_сумма = (
                    основной_цех.расчетная_активная_мощность
                )
                continue

            for индекс_дополнительного_цеха in индексы_дополнительных_цехов:
                дополнительные_цеха.append(self.цеха[индекс_дополнительного_цеха])

            self.расчёт_дополнительной_мощности(
                основной_цех=основной_цех, дополнительные_цеха=дополнительные_цеха
            )


# noinspection NonAsciiCharacters
def main():
    контейнер_цехов = КонтейнерЦехов()

    рп1 = "1 рп"
    рп2 = "2 рп"
    тр1 = "1 тр"
    тр2 = "2 тр"

    категории = [2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 2, 2]

    варианты_схем = [
        [рп1, тр1, тр2, рп2] if категория_цехов == 3 else [тр2]
        for категория_цехов in категории
    ]

    for index, категория_цехов in enumerate(категории_цехов):
        if категория_цехов == 3:
            if (
                контейнер_цехов.цеха[index].полная_расчетная_нагрузка_трансформаторов
                <= 330
            ):
                pass

            elif (
                контейнер_цехов.цеха[index].полная_расчетная_нагрузка_трансформаторов
                > 330
                and контейнер_цехов.цеха[
                    index
                ].полная_расчетная_нагрузка_трансформаторов
                <= 660
            ):

                варианты_схем[index].remove(рп1)

            elif (
                контейнер_цехов.цеха[index].полная_расчетная_нагрузка_трансформаторов
                > 660
            ):
                варианты_схем[index].remove(рп1)

                варианты_схем[index].remove(рп2)

    # print(варианты_схем)
    # ------------------------s
    список_всех_возможных_варианций_схем_с_учетом = list(
        itertools.product(*варианты_схем)
    )
    количество_цехов = 15
    # ------------------------e

    # ------------------------s
    # arr = []

    # for вариант_схемы in список_всех_возможных_варианций_схем_с_учетом:
    #     # print(вариант_схемы, 'вариант_схемы')
    #     нули_и_единицы = [0] * количество_цехов
    #     for цех in range(len(вариант_схемы)):
    #         if вариант_схемы[цех] == тр2 or вариант_схемы[цех] == тр1:
    #             нули_и_единицы[цех] = 1
    #         else:
    #             нули_и_единицы[цех] = 0
    #     arr.append(нули_и_единицы)
    # ------------------------e

    # print(arr[2], 'arr[2]')
    # array.append(zeros_and_ones)
    # print(arr[2])

    # ------------------------s
    # for вариант_схемы in arr:
    #     for цех in range(len(вариант_схемы)):
    #         if вариант_схемы[цех] == 1:
    #             вариант_схемы[цех] = [-1]
    #         elif вариант_схемы[цех] == 0:
    #             вариант_схемы[цех] = []

    #     for цех in range(len(вариант_схемы)):
    #         if вариант_схемы[цех] == []:
    #             for цех_изб in range(len(вариант_схемы)):
    #                 if вариант_схемы[цех_изб] == [-1]:
    #                     вариант_схемы[цех].append(цех_изб)
    # ------------------------e

    # print(arr[200], 'arr 200')
    # print(список_всех_возможных_варианций_схем_с_учетом[500], 'индекс 500')
    # print(arr[500], 'индекс 500')
    # print(arr[20], 'индекс 20')
    # print(список_всех_возможных_варианций_схем_с_учетом[20], 'индекс 20')
    # print(arr[2], 'index 1')
    # print(arr[5000], 'index 2')
    # print(zeros_and_ones)
    # ar = [[[-1], [-1], [-1], [-1], [-1], [-1], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14], [-1], [-1], [-1], [-1], [-1], [-1], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14], [-1], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14]],
    # [[-1], [-1], [-1], [-1], [-1], [-1], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11], [-1], [-1], [-1], [-1], [-1], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11]]]

    # ------------------------s
    # список_всех_возможных_подключений = []
    # for список in arr:
    #     список_всех_возможных_подключений.append(
    #         list(itertools.product(*список)))
    # print(список_всех_возможных_подключений)
    # ------------------------e

    # список_всех_возможных_подключений = list(itertools.product(*ar[0]))
    # print(список_всех_возможных_подключений[1000])
    # print(список_всех_возможных_подключений)
    # result = []
    # for p in список_всех_возможных_подключений:
    #     result.append(p)
    # print(result)
    # print(len(result))
    # # for key, value in карта_доп_цехов:

    # варианты_подключений = []

    # for index, категория_цехов in enumerate(категории_цехов):
    #     if категория_цехов == 3:
    #         for i in range(len(категории_цехов)):
    #             вариант_подключения = {}
    #             for key, val in вариант_подключения:
    #                 вариант_подключения[key] = [index]

    # варианты_подключений[i] =

    # print(контейнер_цехов.потери_мощности_в_ку)
    # print(контейнер_цехов.полная_расчетная_мощность_на_шинах_гпп)
    # print(контейнер_цехов.полная_расчетная_нагрузка_с_учетом_потерь_мощности)
    # print(контейнер_цехов.напряжение_питающей_линии, 'напряжение_питающей_линии')
    # print(контейнер_цехов.цеха[0].расчетная_активная_мощность, 'расчетная_активная_мощность цех 1')
    # print(контейнер_цехов.цеха[0].расчетная_реактивная_мощность, 'расчетная_реактивная_мощность цех 1')
    # print(контейнер_цехов.цеха[0].расчетная_активная_мощность_сумма, 'расчетная_активная_мощность_сумма цех 1')
    # print(контейнер_цехов.цеха[0].расчетная_реактивная_мощность_сумма, 'расчетная_реактивная_мощность_сумма цех 1')
    # print(контейнер_цехов.цеха[3].расчетная_активная_мощность, 'расчетная_активная_мощность цех 4')
    # print(контейнер_цехов.цеха[6].расчетная_активная_мощность, 'расчетная_активная_мощность цех 7 ')
    # print(контейнер_цехов.цеха[9].расчетная_активная_мощность, 'расчетная_активная_мощность цех 10 ')
    # print(контейнер_цехов.цеха[3].расчетная_активная_мощность_сумма, 'расчетная_активная_мощность_сумма')
    # print(контейнер_цехов.цеха[0].коэффициент_загрузки_трансформатора, 'коэффициент_загрузки_трансформатора')
    # print(контейнер_цехов.цеха[0].потери_реактивной_мощности_тп,
    #       'потери_реактивной_мощности_тп')
    # print(контейнер_цехов.цеха[0].расчетная_нагрузка_а_гпп_тп,
    #       'расчетная_нагрузка_а_гпп_тп')
    # print(контейнер_цехов.цеха[0].расчетная_нагрузка_н_гпп_тп,
    #       'расчетная_нагрузка_н_гпп_тп')
    # print(контейнер_цехов.цеха[1].расчетная_нагрузка_а_гпп_тп, 'расчетная_нагрузка_а_гпп_тп')
    # print(контейнер_цехов.цеха[1].расчетная_нагрузка_н_гпп_тп, 'расчетная_нагрузка_н_гпп_тп')
    # print(контейнер_цехов.цеха[0].расчетная_токовая_нагрузка_н_гпп_тп, 'расчетная_токовая_нагрузка_н_гпп_тп')
    # print(контейнер_цехов.цеха[1].допустимая_потеря_напряжения, 'допустимая_потеря_напряжения')
    # print(контейнер_цехов.цеха[1].экономическая_плотность_тока, 'экономическая_плотность_тока')
    # print(контейнер_цехов.цеха[0].допустимая_токовая_нагрузка_а_гпп_тп, 'допустимая_токовая_нагрузка_а_гпп_тп')
    # print(контейнер_цехов.цеха[6].полная_расчетная_нагрузка_трансформаторов, 'полная_расчетная_нагрузка_трансформаторов')
    # print(контейнер_цехов.цеха[3].расчетная_активная_мощность_сумма, 'расчетная_активная_мощность_сумма')
    # print(контейнер_цехов.цеха[3].расчетная_активная_мощность, 'расчетная_активная_мощность')
    # print(контейнер_цехов.цеха[6].расчетная_активная_мощность, 'расчетная_активная_мощность')
    # print(контейнер_цехов.цеха[0].коэффициент_загрузки_трансформатора, 'коэффициент_загрузки_трансформатора')
    print(
        контейнер_цехов.цеха[0].стоимость_потерь_электроэнергии,
        "стоимость_потерь_электроэнергии",
    )
    # print(контейнер_цехов.цеха[0].стоимость_потерь_электроэнергии_в_тп, 'стоимость_потерь_электроэнергии_в_тп')
    print(
        контейнер_цехов.цеха[11].коэффициент_загрузки_трансформатора,
        "коэффициент_загрузки_трансформатора",
    )
    print(
        контейнер_цехов.цеха[11].полная_расчетная_нагрузка_трансформаторов,
        "полная_расчетная_нагрузка_трансформаторов",
    )
    print(
        контейнер_цехов.цеха[11].расчетная_мощность_трансформатора,
        "расчетная_мощность_трансформатора",
    )
    print(
        контейнер_цехов.цеха[11].предварительно_выбранный_трансформатор,
        "предварит����льно_выбранный_трансформатор",
    )
    print(контейнер_цехов.цеха[11].выбранный_трансформатор, "выбранный_трансформатор")
    print(контейнер_цехов.затраты, "затраты")
    # print(контейнер_цехов.цеха[9].длина, 'длина')
    # print(контейнер_цехов.цеха[1].длина, 'длина')
    # print(контейнер_цехов.цеха[0].комплексная_реактивная_мощность_после_компенсации, 'комплексная_реактивная_мощность_после_компенсации')

    # print(контейнер_цехов.цеха[1].выбранный_кабель, 'выбранный_кабель ЦЕХ 2')
    # print(контейнер_цехов.цеха[0].расход_цветного_материала, 'расход_цветного_материала')
    # print(контейнер_цехов.цеха[0].кабель_ток, 'кабель_ток')

    # print(контейнер_цехов.цеха[0].коэффициент_загрузки, 'коэффициент_загрузки')
    # for цех in контейнер_цехов.цеха:
    #     print(цех.полная_расчетная_нагрузка_трансформаторов, 'полная_расчетная_нагрузка_трансформаторов ')


if __name__ == "__main__":
    main()
